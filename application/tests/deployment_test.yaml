suite: Deployment

templates:
  - deployment.yaml

set:
  deployment.image.repository: example-image
  deployment.image.tag: example-tag

tests:
  - it: does not include OAuth proxy container if disabled
    set:
      deployment.openshiftOAuthProxy.enabled: false
    asserts:
      - notContains:
          path: spec.template.spec.containers
          content:
            image: openshift/oauth-proxy:latest
          any: true

  - it: includes OAuth proxy container when enabled
    set:
      deployment.openshiftOAuthProxy.enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers
          content:
            image: openshift/oauth-proxy:latest
          any: true

  - it: does not fail to render when image tag and digest are not given
    set:
      deployment.image.repository: example-image
      deployment.image.tag: ""
      deployment.image.digest: ""
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: example-image

  - it: fails to render when image repository is not present
    set:
      deployment.image.repository: ""
    asserts:
      - failedTemplate:
          errorMessage: "Undefined image for application container"

  - it: uses image tag when given
    set:
      deployment.image.repository: example-image
      deployment.image.tag: example-tag
      deployment.image.digest: ""
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: example-image:example-tag
      - equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: example-tag

  - it: allows setting replicas zero
    set:
      deployment.replicas: 0
    asserts:
      - equal:
          path: spec.replicas
          value: 0

  - it: uses image digest when given
    set:
      deployment.image.repository: example-image
      deployment.image.tag: ""
      deployment.image.digest: sha256:example-digest
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: example-image@sha256:example-digest
      - isNull:
          path: metadata.labels["app.kubernetes.io/version"]

  - it: uses both image digest and tag when given both
    set:
      deployment.image.repository: example-image
      deployment.image.tag: example-tag
      deployment.image.digest: sha256:example-digest
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: example-image:example-tag@sha256:example-digest

  - it: yields empty service account name when disabled
    set:
      rbac.serviceAccount.enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.serviceAccountName

  - it: uses service account name override when present
    set:
      rbac.serviceAccount.enabled: true
      rbac.serviceAccount.name: example-sa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: example-sa

  - it: uses a generated service account name when not given
    set:
      applicationName: example-app
      rbac.serviceAccount.enabled: true
      rbac.serviceAccount.name: ""
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: example-app

  - it: uses grpc probing when set
    set:
      applicationName: example-app
      deployment.startupProbe.enabled: true
      deployment.startupProbe.grpc.port: 5000
      deployment.readinessProbe.enabled: true
      deployment.readinessProbe.grpc.port: 5000
      deployment.livenessProbe.enabled: true
      deployment.livenessProbe.grpc.port: 5000
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 5000
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.grpc.port
          value: 5000
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.port
          value: 5000

  - it: configures envFrom as mandatory by default (as secret)
    set:
      deployment.envFrom:
        foo-secret:
          type: secret
          name: foo
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: foo
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.optional
          value: false

  - it: configures envFrom as optional when configured (as secret)
    set:
      deployment.envFrom:
        foo-secret:
          type: secret
          name: foo
          optional: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: foo
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.optional
          value: true

  - it: configures envFrom as mandatory by default (as configmap)
    set:
      deployment.envFrom:
        foo-configmap:
          type: configmap
          name: foo
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: foo
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.optional
          value: false

  - it: configures envFrom as optional when configured (as configmap)
    set:
      deployment.envFrom:
        foo-configmap:
          type: configmap
          name: foo
          optional: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: foo
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.optional
          value: true

  - it: includes application.stakater.com/workload-class label in pod template for service selector
    set:
      deployment:
        image:
          repository: nginx
          tag: latest
      applicationName: my-app
    asserts:
      - equal:
          path: spec.template.metadata.labels["application.stakater.com/workload-class"]
          value: serving

  - it: uses image templating
    set:
      custom:
        image:
          repository: custom-image
          tag: custom-tag
          digest: sha256:custom-digest
      deployment:
        image:
          repository: "{{ .Values.custom.image.repository }}"
          tag:  "{{ .Values.custom.image.tag }}"
          digest: "{{ .Values.custom.image.digest }}"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-image:custom-tag@sha256:custom-digest

  - it: uses image templating (without tag)
    set:
      custom:
        image:
          repository: custom-image
          digest: sha256:custom-digest
      deployment:
        image:
          repository: "{{ .Values.custom.image.repository }}"
          tag:  "{{ .Values.custom.image.tag }}"
          digest: "{{ .Values.custom.image.digest }}"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-image@sha256:custom-digest

  - it: uses image templating (without digest)
    set:
      custom:
        image:
          repository: custom-image
          tag: custom-tag
      deployment:
        image:
          repository: "{{ .Values.custom.image.repository }}"
          tag:  "{{ .Values.custom.image.tag }}"
          digest: "{{ .Values.custom.image.digest }}"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-image:custom-tag

  - it: uses image templating (without tag and digest)
    set:
      custom:
        image:
          repository: custom-image
      deployment:
        image:
          repository: "{{ .Values.custom.image.repository }}"
          tag:  "{{ .Values.custom.image.tag }}"
          digest: "{{ .Values.custom.image.digest }}"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-image
