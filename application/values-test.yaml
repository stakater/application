# Name of the application.
applicationName: "application"

namespaceOverride: ""

# These labels will be added on all resources, and you can add additional labels from below on individual resource
labels:
  group: com.stakater.platform
  team: stakater
deployment:
  dnsConfig:
    options:
    - name: ndots
      value: '1'
  # By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25%
  # You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  
  # Reload deployment if configMap/secret updates
  reloadOnChange: true

  # Select nodes to deploy which matches the following labels  
  nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool

  # Init containers which runs before the app container
  hostAliases:
  - ip: "127.0.0.1"
    hostnames:
    - "foo.local"
    - "bar.local"
  - ip: "10.1.2.3"
    hostnames:
    - "foo.remote"
    - "bar.remote"

  # Init containers which runs before the app container
  initContainers:
     init-contaner:
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ['/bin/sh']

  # Additional labels for Deployment
  additionalLabels:
    key: value
  
  # Additional label added on pod which is used in Service's Label Selector
  podLabels:
    env: prod

  # Annotations on deployments
  annotations:

  # Additional Pod Annotations added on pod created by this Deployment
  additionalPodAnnotations:
    key: value
  
  # Annotations for fluentd Configurations
  fluentdConfigAnnotations:
    fluentd:
      regex: hello
      timeFormat: world

  # Replicas to be created
  replicas: 2

  # Secrets used to pull image
  imagePullSecrets: ""

  # If want to mount Envs from configmap or secret
  envFrom:
    production-cm:
      type: configmap
      nameSuffix: my-configmap
    logging-config:
      type: configmap
      name: your-configmap
    postgres-config:
      type: secret
      nameSuffix: postgres

  # Environment variables to be passed to the app container
  env:
    ENVIRONMENT:
       value: "dev"
  
  # Volumes to be added to the pod
  volumes:
    config-volume:
      configMap:
        name: configmap-name
    configmap-volume:
      configMap:
        name: '{{ template "application.name" . }}-configmap-nameSuffix'
    secret-volume:
      secret:
        secretName: secret-name
    volume-name:
      emptyDir: {}
    persistent-volume-name:
      persistentVolumeClaim:
        claimName: claim-name

  # Mount path for Volumes 
  volumeMounts:
      volume-name: 
         mountPath: /path1

  # Taint tolerations for nodes
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "app"
      effect: "NoSchedule"

  # Pod affinity and pod anti-affinity allow you to specify rules about how pods should be placed relative to other pods.
  affinity:
   nodeAffinity:
     requiredDuringSchedulingIgnoredDuringExecution:
       nodeSelectorTerms:
       - matchExpressions:
         - key: disktype
           operator: In
           values:
           - ssd

  # Image of the app container
  image:
    repository: repository/image-name
    tag: v1.0.0
    pullPolicy: IfNotPresent

  # Startup, Readiness and Liveness probes
  startupProbe:
    enabled: true
    failureThreshold: 30
    periodSeconds: 10
    httpGet:
      path: '/path'
      port: 8080
    exec: { }

  readinessProbe:
    enabled: true
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 10
    exec: 
      command:
        - cat
        - tmp/healthy

  livenessProbe:
    enabled: true
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 10
    httpGet:
      path: /path
      port: 8080

  # Resources to be defined for pod
  resources:
    limits:
      memory: 256Mi
      cpu: 0.5
    requests:
      memory: 128Mi
      cpu: 0.1

  # Security Context at Container Level
  containerSecurityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  openshiftOAuthProxy:
    enabled: true
    port: 8080
    secretName: "openshift-oauth-proxy-tls"


  # Add additional containers besides init and app containers
  additionalContainers:
  - name: sidecar-contaner
    image: busybox
    imagePullPolicy: IfNotPresent
    command: ['/bin/sh']

  # Security Context for the pod
  securityContext:
    # fsGroup: 2000
  
  # Command for primary container
  command: []

  # Args for primary contaner
  args: []

  # List of ports for the primary container
  ports:
  - containerPort: 8080
    name: http
    protocol: TCP
  - containerPort: 8778
    name: jolokia
    protocol: TCP
  - containerPort: 8443
    name: https
    protocol: TCP

  # Networking using the host network
  hostNetwork: true

  # Graceful termination timeout
  terminationGracePeriodSeconds: 120

# Add Storage volumes to the pods
persistence:
  enabled: true
  mountPVC: false
  mountPath: "/"
  name: ""
  accessMode: ReadWriteOnce
  ## If defined, storageClass: <storageClass>
  ## If set to "-", storageClass: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClass spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "-"
  additionalLabels:
    key: "value"

  annotations:
  #  "helm.sh/resource-policy": keep
  storageSize: 8Gi
  volumeMode: "Filesystem"
  volumeName: ""

# Service object for servicing pods
service:
  additionalLabels:
    key: value
    expose: "true"
  annotations:
    config.xposer.stakater.com/Domain: stakater.com
    config.xposer.stakater.com/IngressNameTemplate: '{{ "{{.Service}}-{{.Namespace}}" }}'
    config.xposer.stakater.com/IngressURLPath: /
    config.xposer.stakater.com/IngressURLTemplate: '{{ "{{.Service}}.{{.Namespace}}.{{.Domain}}" }}'
    service.alpha.openshift.io/serving-cert-secret-name: |
      '{{ template "application.name" . }}-tls'
    xposer.stakater.com/annotations: |-
      kubernetes.io/ingress.class: external-ingress
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/force-ssl-redirect: "true"
  
  ports:
    - port: 8080
      name: http
      protocol: TCP
      targetPort: 8080
  type: ClusterIP

# Ingress object for exposing services
ingress:
  enabled: true

  # Name of the ingress class
  ingressClassName: nginx

  # Port of the service that serves pods
  servicePort: http
  
  #Set pathType: default is ImplementationSpecific; Options: Exact, Prefix
  pathType: ImplementationSpecific 

  # List of host addresses to be exposed by this Ingress

  hosts:
    - host: chart-example.local
      paths: 
      - path: /
      #  pathType: ''
      #  serviceName: ''
      #  servicePort: ''
      - path: /subpath
      #  pathType: ''
      #  serviceName: ''
      #  servicePort: ''
    - host: '{{ .Release.Name }}.stakater.com'
      paths:
      - path: /

  # Additional labels for this Ingress
  additionalLabels:
    key: value

  # Add annotations to this Ingress
  annotations:
    kubernetes.io/ingress.class: external-ingress
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/force-ssl-redirect: "true"

  # TLS details for this Ingress
  tls:
    # Secrets must be manually created in the namespace.
    - secretName: chart-example-tls
      hosts:
        - chart-example.local
        - '{{ .Release.Name }}.stakater.com'

# Route object for exposing services (OpenShift only)
route:
  enabled: true

  # Add annotations to this Route
  annotations:
    kubernetes.io/ingress.class: external-ingress
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/force-ssl-redirect: "true"
  
  # Additional labels for this Route
  additionalLabels:
    key: value
  
  # If no host is added then openshift inserts the default hostname. To Add host explicitly, use host attribute
  host:

  path: /document

  # Port of the service that serves pods
  port:
    targetPort: http

  to:
    weight: 80

  wildcardPolicy: None

  tls:
    # TLS Termination strategy
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

  alternateBackends:
    kind: Service
    name: alternate-application
    weight: 20

secretProviderClass:
  enabled: true
  name: mongo-host
  provider: vault
  vaultAddress: "http://vault:8200"
  roleName: '{{ .Release.Name }}'
  objects: |
    - objectName: "MONGO_HOST"
      secretPath: "testing/data/mongoDb"
      secretKey: "MONGO_HOST"  
  secretObjects:
    - data:
      - key: MONGO_HOST
        objectName: host
      secretName: secret-mongo-host
      type: Opaque


# Expose Application on Forecastle Dashboard
forecastle:
  enabled: true

  # Add additional labels on Forecastle Custom Resource
  additionalLabels:
    key: value
  
  # URL of the icon for the custom app
  icon: https://raw.githubusercontent.com/stakater/ForecastleIcons/master/stakater-big.png
  
  # Name of the application to be displayed on the Forecastle Dashboard
  displayName: "application"
  
  # Group for the custom app (default: .Release.Namespace)
  group: ""

  # Add properties to Custom Resource
  properties:
  
  # Whether app is network restricted or not
  networkRestricted: false

# Role Based Access Control
rbac:
  enabled: true

  # Service Account to use by pods
  serviceAccount:
    enabled: true
    name: "application"

    # Additional Labels on service account
    additionalLabels:
      key: value
    
    # Annotations on service account 
    annotations:
      # key: value

  # Create Roles (Namespaced)
  roles:
  - name: configmaps
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - get
  - name: secrets
    rules:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get

# Additional ConfigMaps  
configMap:
  enabled: true
  additionalLabels:
    key: value
  annotations:
    # key: value
  files:
   code-config:
      key1: value1
      key2: value2
   dev-config:
      key1: value1
      key2: value2

sealedSecret:
  enabled: true
  additionalLabels:
    # key: value
  annotations:
    # key: value
  files:
#  nameSuffix of sealedSecret
    example:
      encryptedData:
        name: AgBghrdepGMKmp/rdtJrkBv/CWpJbtmoMsbKQ7QiZZ2kUoLeeTbrDnhmJY03kWKkNW4kN/sQRf6r1vvBEaR4nkHt5f/ayAeaH3NveI3bdb0xv/svvWjyjehwqwr/kNEAVWxRoUij0Y7MyIEAr4hnV2UnrhgvcjPJLNA8bK6spA+kuT328Vpyceyvnm6yArNn1aYlEckaFHrnculHWRpG73iRYxS5GWAY7EdkLXx7OLLWoopHtLcupklYyPfraJzPvBNZ5/PsyjlUBvoQbGV3cZlrdEj1WHj2S1RQ13ddf2WGtMHmY83t9B3LFZAZuA7BBt4rjludbwQm3/tJ5Kas1dDsSIRIIF7MTeum9YfRB8XUz8IxVKQ/JDskeynrWe3VzN/3HFVnv9GGFy+BCVXZKVU/roIRancz+nXkyoOHS722ZpBi53dfLItoS5dG+0EzArMTQzK/KXHz3b1rxp5oWWDNt3WggTiSg2zwy5ZR8VV2ToTDof6UrFmbCZv/kKriyxbVSxIo3KFnvuRiUZ5MwC0TNut4mW3LKyJfHqkUuLa1mYV6tKF58qBnoj/+JaibAIBEudT9hms5U52p7/jKmgHuop7XPEsz4OVwER//Vbv7X6ctoXtyPu6mZyOfOyJHM8Qj/H7/gwMBYhZHQ96DWrVmZOsWSRpZGJni4Xm7rgt2cFj6UtWv6lvl8aOi/HSZVC3TwWZ9mQrk
      annotations:
        key: value
      labels:
        key: value
      type: Opaque
      clusterWide: true

# Additional Secrets
secret:
  enabled: true
  additionalLabels:
    key: value
  annotations:
    # key: value
  files:
#  nameSuffix of Secret
#   credentials:
#     data:
#       secretKey1: secretValue1
#       secretKey2: secretValue2
#   password:
#     data:
#       secretKey1: secretValue1
#       secretKey2: secretValue2

# Service Monitor to collect Prometheus metrices
serviceMonitor:
  enabled: true
  
  # Additional labels
  additionalLabels:
    key: value

  # Additional annotations
  annotations:
    # key: value

  # List of the endpoints of service from which prometheus will scrape data
  endpoints:
  - interval: 5s
    path: /actuator/prometheus
    port: http

# autoscaling is used for horizonal pod autoscaling
autoscaling:
# enabled is a boolean flag for enabling or disabling autoscaling
  enabled: true
# additionalLabels defines additional labels
  additionalLabels:
    key: value
# annotations defines annotations in key value pair
  annotations:
    # key: value
# minReplicas sets the minimum number of replicas
  minReplicas: 1
# maxReplicas sets the maximum number of replicas
  maxReplicas: 10
# metrics is the list of metrics used for hpa
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
         type: Utilization
         averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
         type: Utilization
         averageUtilization: 60

# autoscaling is used for vertical pod autoscaling
vpa:
# enabled is a boolean flag for enabling or disabling vpa 
  enabled: true
# additionalLabels defines additional labels
  additionalLabels: 
    # key: value
# annotations defines annotations in key value pair
  annotations: 
    # key: value
# container policies for individual containers. 
# There can be at most one entry for every named container and optionally a single wildcard entry with `containerName = '*'`, which handles all containers that do not have individual policies.
  containerPolicies:
    - containerName: '*'
      minAllowed:
        cpu: 0.5
        memory: 1Gi
      maxAllowed:
        cpu: 1
        memory: 5Gi

# EndpointMonitor for IMC (https://github.com/stakater/IngressMonitorController)
endpointMonitor:
  enabled: true
  
  # Additional labels
  additionalLabels:
    key: value

  # Additional annotations
  annotations:
    # key: value

# Certficate CRD to generate the certificate
certificate:
  enabled: false
  
  # Additional labels
  additionalLabels:
    key: value

  # Additional annotations
  annotations:
    # key: value

  secretName: tls-cert
  duration: 8760h0m0s # 1 year
  renewBefore: 720h0m0s # 30d
  subject:
  #  organizations:
  #    - stakater
  #  countries:
  #    - SE
  #  organizationalUnits:
  #    - '{{ template "application.namespace" . }}'
  #  localities:
  #    - Stockholm
  #  provinces:
  #    - Stockholm
  commonName: admin-app
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  keySize: 2048
  isCA: false
  usages:
  #  - digital signature
  #  - client auth
  dnsNames:
  #  - admin-app
  ipAddresses:
  #  - 192.168.0.5
  uriSANs:
  #  - spiffe://cluster.local/ns/sandbox/sa/example
  emailSANs:
  #  - emailSubjectAltNames
  privateKey:
    enabled: true
    rotationPolicy: Always
  issuerRef:
    name: ca-issuer
    # We can reference ClusterIssuers by changing the kind here.
    kind: ClusterIssuer
    group: #cert-manager.io
  keystores:
    enabled: true
    pkcs12:
      create: true
      key: test_key
      name: test-creds
    jks:
      create: false
      key: test_key
      name: test-creds

# AlertmanagerConfig object for defining application specific alertmanager configurations
alertmanagerConfig:
  enabled: true
  
  # AlertmanagerConfig selectionLabels to specify label to be picked up by Alertmanager to add it to base config. Read more about it at [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/alertmanager-monitoring-coreos-com-v1.html] under .spec.alertmanagerConfigSelector
  selectionLabels:
    alertmanagerConfig: "workload"

  # AlertmanagerConfig spec, read details here [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/alertmanagerconfig-monitoring-coreos-com-v1alpha1.html]
  spec:
    route:
      receiver: "null"
      groupBy:
      - job
      routes:
      - receiver: "null"
        groupBy:
        - alertname
        - severity
        continue: true
      groupWait: 30s
      groupInterval: 5m
      repeatInterval: 12h
    receivers:
    - name: "null"
    inhibitRules:
    - sourceMatch:
        - name: severity
          value: 'critical'
      targetMatch:
        - name: severity
          value: 'warning'
      equal: ['cluster', 'service']

# PrometheusRule object for defining application alerting rules
prometheusRule:
  enabled: true
  
  # PrometheusRule labels
  additionalLabels:
    prometheus: stakater-workload-monitoring
    role: alert-rules

  # Groups with alerting rules. Read more here [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/prometheusrule-monitoring-coreos-com-v1.html]

  groups:
    - name: example-app-uptime
      rules:
        - alert: ExampleAppDown
          annotations:
            message: >-
              The Example App is Down (Test Alert)
          expr: up{namespace="test-app"} == 0
          for: 1m
          labels:
            severity: critical

# ExternalSecrets
externalSecret:
  enabled: true

  #SecretStore defines which SecretStore to use when fetching the secret data
  secretStore:
    name: example-secret-store
    #kind: SecretStore # or ClusterSecretStore  

  # RefreshInterval is the amount of time before the values reading again from the SecretStore provider
  refreshInterval: "1m"
  files:
    secret-1-name:
      #Data defines the connection between the Kubernetes Secret keys and the Provider data 
      data:
        example-secret-key:
          remoteRef:
            key: example-provider-key
            property: example-provider-key-property

    secret-2-name:
      #Used to fetch all properties from the Provider key
      dataFrom:
        key: example-provider-key
      type: Opaque
      annotations:
        key: value
      labels:
        key: value

##########################################################
# Network Policy
##########################################################
networkPolicy: 
  enabled: false
  # Additional labels
  additionalLabels:
    key: value

  # Additional annotations
  annotations:
    # key: value
  
  # Ingress rules
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
      
  # Egress rules
  egress:
    - to:
      - ipBlock:
          cidr: 10.0.0.0/24
      ports:
      - protocol: TCP
        port: 5978

##########################################################
# Pod disruption budget - PDB
##########################################################
pdb:
  enabled: true
  minAvailable: 1
  maxUnavailable: 2

# Grafana Dashboard
grafanaDashboard:
  enabled: true
  additionalLabels:
    test-label: chart
  annotations:
    test-annoation: chart
  contents:
    dashboard-test-name-1:
      json: |-
        {
          "annotations": {
            "list": [
              {
                "builtIn": 1,
                "datasource": "-- Grafana --",
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
              }
            ]
          },
          "editable": true,
          "gnetId": null,
          "graphTooltip": 0,
          "id": 9,
          "iteration": 1592326712687,
          "links": [],
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "prometheus",
              "fill": 1,
              "fillGradient": 0,
              "gridPos": {
                "h": 9,
                "w": 24,
                "x": 0,
                "y": 0
              },
              "id": 3,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": true,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {
                "dataLinks": []
              },
              "percentage": false,
              "pointradius": 5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "expr": "sum(irate(haproxy_server_http_responses_total{code=\"5xx\", route=~\"$route\", namespace=~\"$namespace\", pod=~\"$router\"}[$rate])) by (namespace, code, route)",
                  "format": "time_series",
                  "instant": false,
                  "interval": "",
                  "intervalFactor": 1,
                  "legendFormat": "Route: {{route}}, Namespace: {{namespace}}",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Failure Requests Rate (5xx)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "none",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "none",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "prometheus",
              "fill": 1,
              "fillGradient": 0,
              "gridPos": {
                "h": 9,
                "w": 24,
                "x": 0,
                "y": 9
              },
              "id": 4,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": true,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {
                "dataLinks": []
              },
              "percentage": false,
              "pointradius": 5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "expr": "sum(irate(haproxy_server_http_responses_total{code=\"2xx\", route=~\"$route\", namespace=~\"$namespace\", pod=~\"$router\"}[$rate])) by (namespace, code, route)",
                  "format": "time_series",
                  "instant": false,
                  "interval": "",
                  "intervalFactor": 1,
                  "legendFormat": "Route: {{route}}, Namespace: {{namespace}}",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests Rate (2xx)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "none",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "none",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "prometheus",
              "fill": 1,
              "fillGradient": 0,
              "gridPos": {
                "h": 9,
                "w": 24,
                "x": 0,
                "y": 18
              },
              "id": 2,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": true,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {
                "dataLinks": []
              },
              "percentage": false,
              "pointradius": 5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "expr": "sum(haproxy_server_http_responses_total{namespace=~\"$namespace\", route=~\"$route\", code=~\"$code\", pod=~\"$router\"}) by (namespace, route, code)",
                  "format": "time_series",
                  "instant": false,
                  "interval": "",
                  "intervalFactor": 1,
                  "legendFormat": "Code: {{code}}, Route: {{route}}, Namespace: {{namespace}}",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests by HTTP codes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "none",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "none",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "refresh": "5s",
          "schemaVersion": 20,
          "style": "dark",
          "tags": [
            "haproxy"
          ],
          "templating": {
            "list": [
              {
                "allValue": null,
                "current": {
                  "tags": [],
                  "text": "All",
                  "value": "$__all"
                },
                "datasource": "prometheus",
                "definition": "label_values(haproxy_server_http_responses_total, namespace)",
                "hide": 0,
                "includeAll": true,
                "label": null,
                "multi": false,
                "name": "namespace",
                "options": [],
                "query": "label_values(haproxy_server_http_responses_total, namespace)",
                "refresh": 1,
                "regex": ".*",
                "skipUrlSync": false,
                "sort": 0,
                "tagValuesQuery": "",
                "tags": [],
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "allValue": null,
                "current": {
                  "text": "All",
                  "value": "$__all"
                },
                "datasource": "prometheus",
                "definition": "label_values(haproxy_server_http_responses_total{namespace=~\"$namespace\"}, route)",
                "hide": 0,
                "includeAll": true,
                "label": null,
                "multi": false,
                "name": "route",
                "options": [],
                "query": "label_values(haproxy_server_http_responses_total{namespace=~\"$namespace\"}, route)",
                "refresh": 1,
                "regex": ".*",
                "skipUrlSync": false,
                "sort": 0,
                "tagValuesQuery": "",
                "tags": [],
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "allValue": null,
                "current": {
                  "tags": [],
                  "text": "All",
                  "value": "$__all"
                },
                "datasource": "prometheus",
                "definition": "label_values(haproxy_server_http_responses_total, code)",
                "hide": 0,
                "includeAll": true,
                "label": null,
                "multi": false,
                "name": "code",
                "options": [],
                "query": "label_values(haproxy_server_http_responses_total, code)",
                "refresh": 1,
                "regex": ".*",
                "skipUrlSync": false,
                "sort": 0,
                "tagValuesQuery": "",
                "tags": [],
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "allValue": null,
                "current": {
                  "tags": [],
                  "text": "5m",
                  "value": "5m"
                },
                "hide": 0,
                "includeAll": false,
                "label": null,
                "multi": false,
                "name": "rate",
                "options": [
                  {
                    "selected": false,
                    "text": "1m",
                    "value": "1m"
                  },
                  {
                    "selected": true,
                    "text": "5m",
                    "value": "5m"
                  },
                  {
                    "selected": false,
                    "text": "30m",
                    "value": "30m"
                  },
                  {
                    "selected": false,
                    "text": "1h",
                    "value": "1h"
                  }
                ],
                "query": "1m,5m,30m,1h",
                "skipUrlSync": false,
                "type": "custom"
              },
              {
                "allValue": null,
                "current": {
                  "text": "All",
                  "value": "$__all"
                },
                "datasource": "prometheus",
                "definition": "label_values(haproxy_server_http_responses_total, pod)",
                "hide": 0,
                "includeAll": true,
                "label": null,
                "multi": false,
                "name": "router",
                "options": [],
                "query": "label_values(haproxy_server_http_responses_total, pod)",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 0,
                "tagValuesQuery": "",
                "tags": [],
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              }
            ]
          },
          "time": {
            "from": "now-3h",
            "to": "now"
          },
          "timepicker": {
            "refresh_intervals": [
              "5s",
              "10s",
              "30s",
              "1m",
              "5m",
              "15m",
              "30m",
              "1h",
              "2h",
              "1d"
            ],
            "time_options": [
              "5m",
              "15m",
              "1h",
              "6h",
              "12h",
              "24h",
              "2d",
              "7d",
              "30d"
            ]
          },
          "timezone": "",
          "title": "HAProxy Dashboard Example from chart",
          "uid": "OmHEcaFZz",
          "version": 3
        }


cronJob: 
  enabled: true
  jobs:
    db-migration:
      schedule: "* * * 8 *"
      imagePullSecrets:
       - name: nexus-secret
      image: 
        repository: docker.io/nginx
        tag: v1.0.0
      env: 
        KEY:
          value: VALUE
      command: ["/bin/bash"]
      args: ["-c","sleep 5000"]
      resources:  
        requests:
            memory: 5Gi
            cpu: 1
